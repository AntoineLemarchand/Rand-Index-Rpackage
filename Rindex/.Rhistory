View(df)
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "single",
method2 = "complete")    #choice of method for our rand function
plot(df,col=df$single)  #creation of the graphic
plot(df,col=df$complete)
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "single",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$single)  #creation of the graphic
plot(df$x,df$y,col=df$complete)
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "single",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$single)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
Mu = 10
n = 4           #Constant for this example
sigm = 2        #Constant for this example
nb_obs = 100    #Constant for this example
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "single",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$single)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
Mu = 5          #Constant for this example
n = 4           #Constant for this example
sigm = 10
nb_obs = 100    #Constant for this example
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "single",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$single)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
Mu = 5          #Constant for this example
n = 16
sigm = 2        #Constant for this example
nb_obs= 100    #Constant for this example
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "single",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$single)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
Mu = 5          #Constant for this example
n = 4           #Constant for this example
sigm = 2        #Constant for this example
nb_obs= 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "single",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$single)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D2)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D2)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D2",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D2)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D2",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D2)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D2",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D2)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D2",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D2)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
system.time(norme(16))
system.time(2+2)
system.time(2**8)
system.time(expr = norme(2))
system.time(expr = norme(16))
system.time(for(i in 1:100) mad(runif(1000)))
system.time(norme(10))
system.time(clustering(norme(10)))
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "mcquitty",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$mcquitty)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "mcquitty",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$mcquitty)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "mcquitty",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$mcquitty)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "mcquitty",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$mcquitty)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "mcquitty",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$mcquitty)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D)
plot(df$x,df$y,col=df$complete) #creation of the graphics to compare the similarity                                    #between the clusters
library(Rindex)
knitr::opts_chunk$set(collapse = T, comment = "#>")
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D)     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete)
Mu = 10
n = 4           #Constant for this example
sigm = 2        #Constant for this example
nb_obs = 100    #Constant for this example
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D)     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete)
Mu = 5          #Constant for this example
n = 4           #Constant for this example
sigm = 10
nb_obs = 100    #Constant for this example
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D)     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete)
Mu = 5          #Constant for this example
n = 16
sigm = 2        #Constant for this example
nb_obs= 100    #Constant for this example
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D)     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete)
Mu = 5          #Constant for this example
n = 4           #Constant for this example
sigm = 2        #Constant for this example
nb_obs= 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D)     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete)
Mu = 5          #Constant for this example
n = 4           #Constant for this example
sigm = 2        #Constant for this example
nb_obs= 1000
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
plot(df$x,df$y,col=df$ward.D)     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete)
system.tim(norme(4,1000,5,2))
system.time(norme(4,1000,5,2))
system.time(clustering(norme(4,1000,5,2)))
library(fastclust)
install.packages("fastcluster")
system.time(clustering(norme(4,1000,5,2)))
library(fastcluster)
system.time(clustering(norme(4,1000,5,2)))
library(fastcluster)
system.time(clustering(norme(4,1000,5,2)))
system.time(hclust(dist(norme(4,1000,5,2),method="single")))
system.time(hclust(dist(norme(4,1000,5,2)),method="single")))
system.time(hclust(dist(norme(4,1000,5,2)),method="single"))
system.time(cutree(hclust(dist(norme(4,1000,5,2)),method="single")),3)
system.time(cutree(hclust(dist(norme(4,1000,5,2)),method="single")),k=3)
system.time(cutree(hclust(dist(norme(4,1000,5,2)),method="single"),k=3))
system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2)),method="single"),k=3)))
system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2)),method="complete"),k=3)))
system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2)),method="ward"),k=3)))
system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2)),method="ward.D"),k=3)))
system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2)),method="ward.D2"),k=3)))
system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2)),method="centroid"),k=3)))
system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2)),method="mcquitty"),k=3)))
system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2)),method="median"),k=3)))
system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2)),method="average"),k=3)))
system.time(clustering(norme(4,1000,5,2),3))
system.time(clust <- hclust(dist(dataframe), method = "single")
dataframe$single <- as.factor(cutree(clust, k)))
system.time(hclust(dist(norme(4,1000,5,2),method="single"))) + system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2),method="single")),k=3)))
system.time(hclust(dist(norme(4,1000,5,2)),method="single")) + system.time(as.factor(cutree(hclust(dist(norme(4,1000,5,2)),method="single"),k=3)))
# 1ere méthode de clustering "single"
clust <- hclust(dist(dataframe), method = "single")
dataframe$single <- as.factor(cutree(clust, k))
dataframe$single <- as.factor(cutree(clust, k=3))
View(dataframe)
clust=hclust(dist(norme(4,1000,5,2)),k=3)
clust=hclust(dist(norme(4,1000,5,2)),method="single")
View(clust)
dataframe$single=as.factor(cutree(clust,3))
rm(dataframe)
dataframe$single=as.factor(cutree(clust,3))
dataframe=norme(4,1000,5,2)
clust=hclust(dist(dataframe),method="single")
dataframe$single=as.factor(cutree(clust,3))
system.time(clust)
system.time(hclust(dist(dataframe),method="single"))
system.time(as.factor(cutree(clust,3)))
Mu = 5          #Constant for this example
n = 4           #Constant for this example
sigm = 2        #Constant for this example
nb_obs= 1000
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
par(mrow=c(2,2))
plot(df$x,df$y,col=df$ward.D)     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete)
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
par(mfrow=c(2,2))
plot(df$x,df$y,col=df$ward.D)     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete)
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
par(mfrow=c(2,2))
plot(df$x,df$y,col=df$ward.D, title="ward")     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete)
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
par(mfrow=c(2,2))
plot(df$x,df$y,col=df$ward.D, main="ward")     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete)
n = 4
Mu = 5
sigm = 2
nb_obs = 100
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)           #creation of the data frame and implementing it
#in our function clustering
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
par(mfrow=c(2,2))
plot(df$x,df$y,col=df$ward.D, main="ward.D method")     #creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$complete, main="complete method")
Mu = 5          #Constant for this example
n = 4           #Constant for this example
sigm = 2        #Constant for this example
nb_obs= 500
#creation of the data frame and implementing it in our function clustering
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)
jaccard(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our jaccard function
#creation of the graphics to compare the similarities
plot(df$x,df$y,col=df$ward.D, main="ward.D method")
plot(df$x,df$y,col=df$complete, main="complete method")
library(Rindex)
vignette(package="Rindex")
vignette("Indice de Jaccard",package="Rindex")
browseVignettes(package="Rindex")
browseVignettes("Rindex")
browseVignettes("stats")
browseVignettes("abind")
browseVignettes(all=FALSE)
browseVignettes(all=TRUE)
vignette(Indice de Jaccard,package="Rindex")
vignette("Indice de Jaccard",package="Rindex")
browseVignettes(all=FALSE)
vignette("rowwise")
library(Rindex)
library(Rindex)
browseVignettes(all=FALSE)
browseVignettes(all=TRUE)
browseVignettes(all=FALSE)
library(Rindex)
browseVignettes(all=FALSE)
browseVignettes(package="Rindex")
library(Rindex)
library()
library(Rindex)
knitr::opts_chunk$set(collapse = T, comment = "#>")
Mu = 5          #Constant for this example
n = 4           #Constant for this example
sigm = 2        #Constant for this example
nb_obs= 500
#creation of the data frame and implementing it in our function clustering
df <- clustering(dataframe = norme(n.norms = n,n = nb_obs,mu = Mu,sigma = sigm),
k = 3)
rand(dataframe = df,
method1 = "ward.D",
method2 = "complete")    #choice of method for our rand function
#creation of the graphics to compare the similarities
par(mfrow=c(2,2))
plot(df$x,df$y,col=df$ward.D, main="ward.D method")
plot(df$x,df$y,col=df$complete, main="complete method")
library(Rindex)
browseVignettes(package = "Rindex")
install.packages("Rindex", build_vignettes=TRUE)
install.packages("Rindex", build_vignettes = TRUE)
install.packages("Rindex", build_vignettes = TRUE, repos = "D:\Université\L3 MIASHS\S2\TER")
install.packages("Rindex", build_vignettes = TRUE, repos = "C:/Users/leogu/Documents/Ter")
library(Rindex)
installed.packages()
devtools::build_vignettes()
browseVignettes("Rindex")
library(Rindex)
browseVignettes("Rindex")
devtools::install(build_vignettes = TRUE)
browseVignettes("Rindex")
devtools::install(build_vignettes = TRUE)
browseVignettes("Rindex")
vignette("Indice de Rand", package="Rindex")
browseVignettes("Rindex")
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
browseVignettes(package = "Rindex")
vignette("Indice de Rand",package="Rindex")
vignette("vignette_jaccard",package="Rindex")
